/*! \page input %Input Deck
 * Note: All the following variables are housed in the Input_List class. Each one of the below variables needs to be specified. Some need to be specified before the others 
 * so check this page or an example inputdeck to double-check
 * 
 * \section oss Overall Simulation Setup
 *\subsection simgrid Simulation Grid
 * 
 * - \code NnodesX = ... \endcode 
 * The number of MPI processes.
 * 
 * - \code numsp = ... \endcode Specifies the number of species. Just 1 for now.
 * 
 * - \code l0 = ... \endcode 
 * The highest 'l' value to use in the velocity space spherical harmonic expansion.
 * 
 * - \code m0  = ... \endcode 
 * The highest 'm' value to use in the velocity space spherical harmonic expansion.
 * 
 * - \code nump = ... \endcode 
 *  The number of cells that will make up the momentum-space axis in the simulation. 
 *
 * - \code pmax = ... \endcode  Specifies extent of cell centered momentum grid (0 < p < pmax). 
 * 
 * - \code mass = ... \endcode  Species mass
 * 
 * - \code charge = ... \endcode  The extent of the absolute value of momentum to use in the simulation. `pmin = pmax /(2.0* nump+1)`.
 * 
 * - \code Nx = ... \endcode Number of cells along the X/Y directions. 
 * 
 * - \code xmin = ... \endcode Extent of simulation domain covered with Nx cells. Cell centered.
 * - \code xmax = ... \endcode 
 * 
 * 
 
 *\subsection time Time Grid
 * - \code clf_dp = ... \endcode  Parameter that controls the minimum size of the time-step. The simulation step size (in simulation units) is `_h_ = dt_out / float(integer(_dt_out_/clf_dp)+1)`. 
 * Please refer to the Clock object for more details.
 * 
 * - \code n_outsteps = ... \endcode  Number of outputs, evenly spaced from `t=0` to `t=t_stop`.
 * 
 * - \code n_distoutsteps = ... \endcode  Number of output steps between distribution outputs.
 * 
 * - \code t_stop = ... \endcode  End simulation at this time (in simulation units).
 * 
 * 
 * \section switches Various Switches
 * 
 *\subsection collswitch Collision module
 * - \code collisions_switch = [true | false] \endcode 
 * 
 * - \code f00_collisions = [implicit | explicit] \endcode Indicates which f00 collision push should be performed.
 * 
 * - \code flm_collisions = [true | false] \endcode Indicates whether the flm collision push should be performed.
 * 
 * - \code small_dt = ... \endcode Specifies the timestep for explicit f_00 collisions
 * 
 * - \code smaller_dt = ... \endcode Specifies the timestep for laser heating loop using the explicit f00 collision formulation.
 * 
 * - \code f00_exp_parabolic_approximation = ... \endcode Specifies the number of cells approximated using the parabolic approximation
 * 
 * - \code f00_imp_RB_D_tolerance = ... \endcode Specifies the convergence tolerance for the D coefficient in the implicit f00 solver.
 * 
 * - \code f00_imp_RB_D_iterations = ... \endcode Specifies the maximum number of iterations performed to calculate the Rosenbluth D coefficient in the implicit f00 solver.
 * 
 * - \code flm_imp_tridiagonal = [true | false] \endcode Specifies whether full e-e collisions need to be performed for flm.
 * 
 * 
 *\subsection vlasovswitch Vlasov Switches
 * - \code implicit_B_push = [true | false] \endcode Specifies whether the implicit B field pusher should be used.
 * 
 * \subsection fieldsolverswitch Field Solver
 * 
 * - \code implicit_E = [true | false] \endcode Specifies whether implicit field solver should be used. Works great for collisional problems.
 * 
 * \section plasmaconditions Initial Plasma Conditions
 *\subsection init Density and Temperature
 * 
 * - \code density_np = ... \endcode  Density in units of 1/cm^3 that corresponds to a normalized simulation density of 1.0. Sets the real units for many of the quantities i.e. time
 * 
 * - \code super_gaussian_distribution = ... \endcode  Specify exponent of distribution according to SG theory. 2.0 specifies a Maxwellian.
 * 
 * - \code pth_ref = ... \endcode  reference thermal velocity. Only used for unit calculation at the beginning of simulation. Does not come into the code at all.
 * 
 * - \code hydrocharge = ... \endcode  Ion charge - used for electron-ion collisions
 * 
 * The plasma density and temperature can be initialized using the following.
 * These quantities can be uniform in space, specified by a function, or by using a piecewise linear interpolation by using
 * the following format (for a 1D system ranging from -100.0 to 100.0):
 * \code 
 * n(x) = cst 1.0
 * n(x) = fnc {1.0 + 0.01*sin(2*pi*x/200)}
 * n(x) = pcw {-100.0 1.0 100.0 1.0}
 * \endcode 
 * Note that the piecewise input needs to be supplied in pairs. The code requires
 * \code
 * n(x) = ...
 * T(x) = ...
 * \endcode 
 * 
 * \subsection initj Current
 * 
 * \code init_f1 = [true | false] \endcode Switch indicating whether f1 needs to be non-zero
 * 
 * \code multiplier-f10(x) = ... \endcode Use input as n(x), T(x) above. This is effectively a C(x) such that 
 * f10(x) = C(x) * (v^3 df00/dv)
 * 
 * \subsection bound Boundaries
 * 
 * \code bndX = [0 | 1] \endcode 0 - periodic, 1 - mirror
 * 
 * 
 *\subsection initEM External Electromagnetic Fields
 * \code
 * Ex(x) = ...
 * Ex(t) = ...
 * Ey(x) = ...
 * Ey(t) = ...
 * Ez(x) = ...
 * Ez(t) = ...
 * Bx(x) = ...
 * Bx(t) = ...
 * By(x) = ...
 * By(t) = ...
 * Bz(x) = ...
 * Bz(t) = ...
 * \endcode 
 * in the same formatting as the density specified in the plasma conditions. 
 * This toggle sets the fields to the specified value at every timestep if their value is > 0.
 * This does not enable holding a certain at 0.
 * 
 * \subsection wavedriver External Wave Driver
 * 
 * \code Ex(x,t) = ... \endcode Two variable function specified as above.
 * \code Ey(x,t) = ... \endcode Two variable function specified as above.
 * \code Ez(x,t) = ... \endcode Two variable function specified as above.
 * \code Bx(x,t) = ... \endcode Two variable function specified as above.
 * \code By(x,t) = ... \endcode Two variable function specified as above.
 * \code Bz(x,t) = ... \endcode Two variable function specified as above.
 * This toggle adds to the self consistent fields in the simulation. It can act as a ponderomotive driver
 * 
 * \code rise_flat_fall_center \endcode Provide 4 numbers in a row separated by spaces for the rise time, flat time, fall time, and center of the pulse.
 * 
 * 
 *\subsection hydro Initialization for ion fluid.
 * 
 * - \code hydro = [true | false]  \endcode
 * 
 * - \code hydroatomicmass = ... \endcode 
 * 
 * - \code MX_cooling = ... \endcode  Doesn't do anything for now
 * 
 * - \code Z(x) = ... \endcode  
 * 
 * - \code ni(x) = ... \endcode  
 * 
 * - \code Ti(x) = ... \endcode  
 * 
 * - \code Ux(x) = ... \endcode  
 * 
 *
 * \subsection IB Initialization for inverse Bremsstrahlung heating module
 * 
 * - \code inverse_bremsstrahlung = [true | false]  \endcode
 * 
 * - \code I_0 = ... \endcode  laser intensity in W/cm^2
 * 
 * - \code lambda_0 = ... \endcode  laser wavelength in microns
 * 
 * - \code I(x) = ... \endcode
 *
 * - \code I(t) = ... \endcode
 * \section output Output
 * All can be [true | false]
 * \code 
 * 
 * o_Ex = 
 * o_Ey = 
 * o_Ez = 
 * o_Bx = 
 * o_By = 
 * o_Bz = 
 * 
 * o_x1x2 = 
 * o_Temperature = 
 * 
 * o_Ex = 
 * o_Ey = 
 * o_Ez = 
 * 
 * o_Ex = 
 * o_Ey = 
 * o_Ez = 
 * 
 * o_Ex = 
 * o_Ey = 
 * o_Ez = 
 * 
 * o_p1x1 = 
 * o_f0x1 = 
 * o_f10x1 = 
 * o_f11x1 =
 * o_f20x1 =
 * o_fl0x1 = 
 * 
 * o_Ux = 
 * o_Uy =  
 * o_Uz =  
 * o_Z =  
 * o_ni =  
 * o_Ti =  
 * \endcode
 * 
 */